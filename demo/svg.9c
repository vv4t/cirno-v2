#include <sdl>
#include <math>
#include "svg_data.9c"

fn linear_interp(class vec2 a, class vec2 b, f32 t) : class vec2
{
  return a.copy().add(b.copy().sub(a).mulf(t));
}

fn cubic_interp(class vec2[] curve, i32 i, f32 t) : class vec2
{
  class vec2 a_b = linear_interp(curve[i + 0], curve[i + 1], t);
  class vec2 b_c = linear_interp(curve[i + 1], curve[i + 2], t);
  class vec2 c_d = linear_interp(curve[i + 2], curve[i + 3], t);
  
  class vec2 ab_bc = linear_interp(a_b, b_c, t);
  class vec2 bc_cd = linear_interp(b_c, c_d, t);
  
  return linear_interp(ab_bc, bc_cd, t);
}

fn draw_curve(class vec2[] curve)
{
  i32 N = 12;
  f32 step = 1.0 / N;
  
  for (i32 i = 0; i < curve.length; i += 4) {
    for (i32 j = 0; j < N; j++) {
      class vec2 a = cubic_interp(curve, i, j * step);
      class vec2 b = cubic_interp(curve, i, (j + 1) * step);
      
      draw_line(a.x, a.y, b.x, b.y);
    }
  }
}

f32 time = 0;

fn update()
{
  time += 1.0;
}

fn draw()
{
  draw_curve(curve_1);
  draw_curve(curve_2);
  draw_curve(curve_3);
  draw_curve(curve_4);
  draw_curve(curve_5);
  draw_curve(curve_6);
  draw_curve(curve_7);
  draw_curve(curve_8);
}
